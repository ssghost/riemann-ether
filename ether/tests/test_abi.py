import unittest

from ether import abi


class TestABI(unittest.TestCase):

    def setUp(self):
        self.vectors = [
            (['bytes3[2]'], [[b'abc', b'def']], bytes.fromhex('61626300000000000000000000000000000000000000000000000000000000006465660000000000000000000000000000000000000000000000000000000000')),  # noqa: E501
            (['uint32', 'bool'], [69, True], bytes.fromhex('00000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001')),  # noqa: E501
            (['uint32', 'bool'], [69, False], bytes.fromhex('00000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000000')),  # noqa: E501
            (['bytes', 'bool', 'uint[]'], [b'dave', True, [1, 2, 3]], bytes.fromhex('0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000464617665000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003')),  # noqa: E501
            (['uint[][]', 'string[]'], [[[1, 2], [3]], ["one", "two", "three"]], bytes.fromhex('000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000036f6e650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000374776f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000057468726565000000000000000000000000000000000000000000000000000000')),  # noqa: E501
            # ([], [], bytes.fromhex('')),
            # ([], [], bytes.fromhex('')),
            # ([], [], bytes.fromhex('')),
        ]

    def test_roundtrip(self):
        for t in self.vectors:
            (types, args, expected_blob) = (t[0], t[1], t[2])

            blob = abi.encode_many(types, args)
            self.assertEqual(blob, expected_blob)

            decoded = abi.decode_many(types, blob)
            self.assertEqual(decoded, args)

            re_blob = abi.encode_many(types, decoded)
            self.assertEqual(re_blob, blob)
